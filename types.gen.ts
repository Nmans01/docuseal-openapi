// This file is auto-generated by @hey-api/openapi-ts

export type GetTemplatesData = {
    query?: {
        /**
         * The unique identifier of the template to start the list from. It allows you to receive only templates with id greater than the specified value. Pass ID value from the `pagination.next` response to load the next batch of templates.
         */
        after?: number;
        /**
         * Get only archived templates instead of active ones.
         */
        archived?: boolean;
        /**
         * The unique identifier of the template to end the list with. It allows you to receive only templates with id less than the specified value.
         */
        before?: number;
        /**
         * The unique applications-specific identifier provided for the template via API or Embedded template form builder. It allows you to receive only templates with your specified external id.
         */
        external_id?: string;
        /**
         * Filter templates by folder name.
         */
        folder?: string;
        /**
         * The number of templates to return. Default value is 10. Maximum value is 100.
         */
        limit?: number;
        /**
         * Filter templates based on the name partial match.
         */
        q?: string;
    };
};

export type GetTemplatesResponse = ({
    /**
     * List of templates.
     */
    data?: Array<{
        /**
         * Unique identifier of the document template.
         */
        id?: number;
        /**
         * Unique slug of the document template.
         */
        slug?: string;
        /**
         * List of documents attached to the template.
         */
        schema?: Array<{
            /**
             * Unique indentifier of attached document to the template.
             */
            attachment_uuid?: string;
            /**
             * Name of the attached document to the template.
             */
            name?: string;
        }>;
        /**
         * List of fields to be filled in the template.
         */
        fields?: Array<{
            /**
             * Unique identifier of the field.
             */
            uuid?: string;
            /**
             * Unique identifier of the submitter that filled the field.
             */
            submitter_uuid?: string;
            /**
             * Field name.
             */
            name?: string;
            /**
             * Indicates if the field is required.
             */
            required?: boolean;
            /**
             * List of areas where the field is located in the document.
             */
            areas?: Array<{
                /**
                 * X coordinate of the area where the field is located in the document.
                 */
                x?: number;
                /**
                 * Y coordinate of the area where the field is located in the document.
                 */
                y?: number;
                /**
                 * Width of the area where the field is located in the document.
                 */
                w?: number;
                /**
                 * Height of the area where the field is located in the document.
                 */
                h?: number;
                /**
                 * Unique identifier of the attached document where the field is located.
                 */
                attachment_uuid?: string;
                /**
                 * Page number of the attached document where the field is located.
                 */
                page?: number;
            }>;
        }>;
        submitters?: Array<{
            /**
             * Submitter name.
             */
            name?: string;
            /**
             * Unique identifier of the submitter.
             */
            uuid?: string;
        }>;
        /**
         * Unique identifier of the author of the template.
         */
        author_id?: number;
        /**
         * Date and time when the template was archived.
         */
        archived_at?: string;
        /**
         * Date and time when the template was created.
         */
        created_at?: string;
        /**
         * Date and time when the template was updated.
         */
        updated_at?: string;
        /**
         * Source of the template.
         */
        source?: string;
        /**
         * Identifier of the template in the external system.
         */
        external_id?: string;
        /**
         * Unique identifier of the folder where the template is placed.
         */
        folder_id?: number;
        /**
         * Folder name where the template is placed.
         */
        folder_name?: string;
        author?: {
            /**
             * Unique identifier of the author.
             */
            id?: number;
            /**
             * First name of the author.
             */
            first_name?: string;
            /**
             * Last name of the author.
             */
            last_name?: string;
            /**
             * Author email.
             */
            email?: string;
        };
        /**
         * List of documents attached to the template.
         */
        documents?: Array<{
            /**
             * Unique identifier of the document.
             */
            id?: number;
            /**
             * Unique identifier of the document.
             */
            uuid?: string;
            /**
             * URL of the document.
             */
            url?: string;
            /**
             * Document preview image URL.
             */
            preview_image_url?: string;
            /**
             * Document filename.
             */
            filename?: string;
        }>;
    }>;
    pagination?: {
        /**
         * Templates count.
         */
        count?: number;
        /**
         * The ID of the tempate after which the next page starts.
         */
        next?: number;
        /**
         * The ID of the tempate before which the previous page ends.
         */
        prev?: number;
    };
});

export type GetTemplatesError = unknown;

export type GetTemplateData = {
    path: {
        /**
         * The unique identifier of the document template.
         */
        id: number;
    };
};

export type GetTemplateResponse = ({
    /**
     * Unique identifier of the document template.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Identifier of the template in the external system.
     */
    external_id?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Unique identifier of the author.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Unique identifier of the document.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type GetTemplateError = unknown;

export type ArchiveTemplateData = {
    path: {
        /**
         * The unique identifier of the document template.
         */
        id: number;
    };
};

export type ArchiveTemplateResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
});

export type ArchiveTemplateError = unknown;

export type UpdateTemplateData = {
    body: {
        /**
         * The name of the template
         */
        name?: string;
        /**
         * The folder's name to which the template should be moved
         */
        folder_name?: string;
        /**
         * An array of submitter role names to update the template with.
         */
        roles?: Array<(string)>;
        /**
         * Set `false` to unarchive template.
         */
        archived?: boolean;
    };
    path: {
        /**
         * The unique identifier of the document template.
         */
        id: number;
    };
};

export type UpdateTemplateResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Date and time when the template was last updated.
     */
    updated_at?: string;
});

export type UpdateTemplateError = unknown;

export type GetSubmissionsData = {
    query?: {
        /**
         * The unique identifier of the submission to start the list from. It allows you to receive only submissions with an ID greater than the specified value. Pass ID value from the `pagination.next` response to load the next batch of submissions.
         */
        after?: number;
        /**
         * The unique identifier of the submission that marks the end of the list. It allows you to receive only submissions with an ID less than the specified value.
         */
        before?: number;
        /**
         * The number of submissions to return. Default value is 10. Maximum value is 100.
         */
        limit?: number;
        /**
         * Filter submissions based on submitters name, email or phone partial match.
         */
        q?: string;
        /**
         * Filter submissions by template folder name.
         */
        template_folder?: string;
        /**
         * The template ID allows you to receive only the submissions created from that specific template.
         */
        template_id?: number;
    };
};

export type GetSubmissionsResponse = ({
    data?: Array<{
        /**
         * Submission unique ID number.
         */
        id?: number;
        /**
         * The source of the submission.
         */
        source?: string;
        /**
         * Unique slug of the submission.
         */
        slug?: string;
        /**
         * The status of the submission.
         */
        status?: string;
        /**
         * The order of submitters.
         */
        submitters_order?: string;
        /**
         * Audit log file URL.
         */
        audit_log_url?: string;
        /**
         * Combined PDF file URL with documents and Audit Log.
         */
        combined_document_url?: string;
        /**
         * The date and time when the submission was completed.
         */
        completed_at?: string;
        /**
         * The date and time when the submission was created.
         */
        created_at?: string;
        /**
         * The date and time when the submission was last updated.
         */
        updated_at?: string;
        /**
         * The date and time when the submission was archived.
         */
        archived_at?: string;
        /**
         * The list of submitters.
         */
        submitters?: Array<{
            /**
             * Submission unique ID number.
             */
            id?: number;
            /**
             * Submission ID number.
             */
            submission_id?: number;
            /**
             * Submitter UUID.
             */
            uuid?: string;
            /**
             * The email address of the submitter.
             */
            email?: string;
            /**
             * Unique key to be used in the form signing link and embedded form.
             */
            slug?: string;
            /**
             * The date and time when the signing request was sent to the submitter.
             */
            sent_at?: string;
            /**
             * The date and time when the submitter opened the signing form.
             */
            opened_at?: string;
            /**
             * The date and time when the submitter completed the signing form.
             */
            completed_at?: string;
            /**
             * The date and time when the submitter declined to complete the signing form.
             */
            declined_at?: string;
            /**
             * The date and time when the submitter was created.
             */
            created_at?: string;
            /**
             * The date and time when the submitter was last updated.
             */
            updated_at?: string;
            /**
             * Submitter name.
             */
            name?: string;
            /**
             * Submitter phone number.
             */
            phone?: string;
            /**
             * Your application-specific unique string key to identify this submitter within your app.
             */
            external_id?: string;
            /**
             * The status of signing request for the submitter.
             */
            status?: string;
            /**
             * The role of the submitter.
             */
            role?: string;
            /**
             * Object with additional information about the submitter.
             */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Object with submitter preferences.
             */
            preferences?: {
                [key: string]: unknown;
            };
        }>;
        template?: {
            /**
             * Template unique ID number.
             */
            id?: number;
            /**
             * The name of the submission template.
             */
            name?: string;
            /**
             * Your application-specific unique string key to identify this template within your app.
             */
            external_id?: string;
            /**
             * Folder name where the template is located.
             */
            folder_name?: string;
            /**
             * The date and time when the submission template was created.
             */
            created_at?: string;
            /**
             * The date and time when the submission template was last updated.
             */
            updated_at?: string;
        };
        created_by_user?: {
            /**
             * Unique identifier of the user who created the submission.
             */
            id?: number;
            /**
             * The first name of the user who created the submission.
             */
            first_name?: string;
            /**
             * The last name of the user who created the submission.
             */
            last_name?: string;
            /**
             * The email address of the user who created the submission.
             */
            email?: string;
        };
    }>;
    pagination?: {
        /**
         * Submissions count.
         */
        count?: number;
        /**
         * The ID of the submission after which the next page starts.
         */
        next?: number;
        /**
         * The ID of the submission before which the previous page ends.
         */
        prev?: number;
    };
});

export type GetSubmissionsError = unknown;

export type CreateSubmissionData = {
    body: {
        /**
         * The unique identifier of the template. Document template forms can be created via the Web UI, <a href="https://www.docuseal.co/guides/use-embedded-text-field-tags-in-the-pdf-to-create-a-fillable-form" class="link">PDF and DOCX API</a>, or <a href="https://www.docuseal.co/guides/create-pdf-document-fillable-form-with-html-api" class="link">HTML API</a>.
         */
        template_id: number;
        /**
         * Set `false` to disable signature request emails sending.
         */
        send_email?: boolean;
        /**
         * Set `true` to send signature request via phone number and SMS.
         */
        send_sms?: boolean;
        /**
         * Pass 'random' to send signature request emails to all parties right away. The order is 'preserved' by default so the second party will receive a signature request email only after the document is signed by the first party.
         */
        order?: 'preserved' | 'random';
        /**
         * Specify URL to redirect to after the submission completion.
         */
        completed_redirect_url?: string;
        /**
         * Specify BCC address to send signed documents to after the completion.
         */
        bcc_completed?: string;
        /**
         * Specify Reply-To address to use in the notification emails.
         */
        reply_to?: string;
        /**
         * Specify the expiration date and time after which the submission becomes unavailable for signature.
         */
        expire_at?: string;
        message?: {
            /**
             * Custom signature request email subject.
             */
            subject?: string;
            /**
             * Custom signature request email body. Can include the following variables: {{template.name}}, {{submitter.link}}, {{account.name}}.
             */
            body?: string;
        };
        /**
         * The list of submitters for the submission.
         */
        submitters: Array<{
            /**
             * The name of the submitter.
             */
            name?: string;
            /**
             * The role name or title of the submitter.
             */
            role?: string;
            /**
             * The email address of the submitter.
             */
            email: string;
            /**
             * The phone number of the submitter, formatted according to the E.164 standard.
             */
            phone?: string;
            /**
             * An object with pre-filled values for the submission. Use field names for keys of the object. For more configurations see `fields` param.
             */
            values?: {
                [key: string]: unknown;
            };
            /**
             * Your application-specific unique string key to identify this submitter within your app.
             */
            external_id?: string;
            /**
             * Pass `true` to mark submitter as completed and auto-signed via API.
             */
            completed?: boolean;
            /**
             * An object with pre-filled values for the submission. Use field names for keys of the object. For more configurations see `fields` param.
             */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Set `false` to disable signature request emails sending.
             */
            send_email?: boolean;
            /**
             * Set `true` to send signature request via phone number and SMS.
             */
            send_sms?: boolean;
            /**
             * Submitter specific URL to redirect to after the submission completion.
             */
            completed_redirect_url?: string;
            /**
             * A list of configurations for template document form fields.
             */
            fields?: Array<{
                /**
                 * Document template field name
                 */
                name: string;
                /**
                 * Description of the field to be displayed on the signing form. Can accept markdown.
                 */
                description?: string;
                /**
                 * Default value of the field. Use base64 encoded file or a public URL to the image file to set default signature or image fields.
                 */
                default_value?: string;
                /**
                 * HTML field validation pattern string based on https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern specification.
                 */
                validation_pattern?: string;
                /**
                 * A custom message to display on pattern validation failure.
                 */
                invalid_message?: string;
                /**
                 * Set `true` to make it impossible for the submitter to edit predefined field value.
                 */
                readonly?: boolean;
            }>;
        }>;
    };
};

export type CreateSubmissionResponse = (Array<{
    /**
     * Submitter unique ID number.
     */
    id?: number;
    /**
     * Submission UUID.
     */
    submission_id?: number;
    /**
     * Submitter UUID
     */
    uuid?: string;
    /**
     * The email address of the submitter.
     */
    email?: string;
    /**
     * Unique key to be used in the signing form URL.
     */
    slug?: string;
    /**
     * An array of objects with pre-filled values for the submission. Use field names for keys of the object.
     */
    values?: {
        [key: string]: unknown;
    };
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * User agent string of the submitter.
     */
    ua?: string;
    /**
     * IP address of the submitter.
     */
    ip?: string;
    /**
     * The date and time when the signing request was sent to the submitter.
     */
    sent_at?: string;
    /**
     * The date and time when the submitter opened the signing form.
     */
    opened_at?: string;
    /**
     * The date and time when the submitter completed the signing form.
     */
    completed_at?: string;
    /**
     * The date and time when the submitter declined the signing form.
     */
    declined_at?: string;
    /**
     * The date and time when the submitter was created.
     */
    created_at?: string;
    /**
     * The date and time when the submitter was last updated.
     */
    updated_at?: string;
    /**
     * The name of the submitter.
     */
    name?: string;
    /**
     * The phone number of the submitter.
     */
    phone?: string;
    /**
     * Your application-specific unique string key to identify this submitter within your app.
     */
    external_id?: string;
    preferences?: {
        /**
         * Set `false` to disable signature request emails sending.
         */
        send_email?: boolean;
        /**
         * Set `true` to send signature request via phone number and SMS.
         */
        send_sms?: boolean;
    };
}>);

export type CreateSubmissionError = unknown;

export type GetSubmissionData = {
    path: {
        /**
         * The unique identifier of the submission.
         */
        id: number;
    };
};

export type GetSubmissionResponse = ({
    /**
     * Submission unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the submission.
     */
    slug?: string;
    /**
     * The source of the submission.
     */
    source?: string;
    /**
     * The order of submitters.
     */
    submitters_order?: string;
    /**
     * Audit log file URL.
     */
    audit_log_url?: string;
    /**
     * Combined PDF file URL with documents and Audit Log.
     */
    combined_document_url?: string;
    /**
     * The date and time when the submission was created.
     */
    created_at?: string;
    /**
     * The date and time when the submission was last updated.
     */
    updated_at?: string;
    /**
     * The date and time when the submission was archived.
     */
    archived_at?: string;
    /**
     * The list of submitters.
     */
    submitters?: Array<{
        /**
         * Submitter unique ID number.
         */
        id?: number;
        /**
         * Submission unique ID number.
         */
        submission_id?: number;
        /**
         * Submitter UUID
         */
        uuid?: string;
        /**
         * The email address of the submitter.
         */
        email?: string;
        /**
         * Unique key to be used in the form signing link and embedded form.
         */
        slug?: string;
        /**
         * The date and time when the signing request was sent to the submitter.
         */
        sent_at?: string;
        /**
         * The date and time when the submitter opened the signing form.
         */
        opened_at?: string;
        /**
         * The date and time when the submitter completed the signing form.
         */
        completed_at?: string;
        /**
         * The date and time when the submitter declined the signing form.
         */
        declined_at?: string;
        /**
         * The date and time when the submitter was created.
         */
        created_at?: string;
        /**
         * The date and time when the submitter was last updated.
         */
        updated_at?: string;
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Submitter phone number.
         */
        phone?: string;
        /**
         * Your application-specific unique string key to identify this submitter within your app.
         */
        external_id?: string;
        /**
         * The status of signing request for the submitter.
         */
        status?: string;
        /**
         * An array of pre-filled values for the submission.
         */
        values?: Array<{
            /**
             * Document template field name
             */
            field?: string;
            /**
             * Pre-filled value of the field.
             */
            value?: string;
        }>;
        /**
         * An array of documents that the submitter has to sign.
         */
        documents?: Array<{
            /**
             * Document name.
             */
            name?: string;
            /**
             * Document URL.
             */
            url?: string;
        }>;
        /**
         * The role of the submitter in the signing process.
         */
        role?: string;
    }>;
    template?: {
        /**
         * Template unique ID number.
         */
        id?: number;
        /**
         * The name of the submission template.
         */
        name?: string;
        /**
         * Your application-specific unique string key to identify this template within your app.
         */
        external_id?: string;
        /**
         * Folder name where the template is located.
         */
        folder_name?: string;
        /**
         * The date and time when the submission template was created.
         */
        created_at?: string;
        /**
         * The date and time when the submission template was last updated.
         */
        updated_at?: string;
    };
    created_by_user?: {
        /**
         * Unique identifier of the user who created the submission.
         */
        id?: number;
        /**
         * The first name of the user who created the submission.
         */
        first_name?: string;
        /**
         * The last name of the user who created the submission.
         */
        last_name?: string;
        /**
         * The email address of the user who created the submission.
         */
        email?: string;
    };
    submission_events?: Array<{
        /**
         * Submission event unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the submitter that triggered the event.
         */
        submitter_id?: number;
        /**
         * Event type.
         */
        event_type?: string;
        /**
         * Date and time when the event was triggered.
         */
        event_timestamp?: string;
    }>;
    documents?: Array<{
        /**
         * Document name.
         */
        name?: string;
        /**
         * Document URL.
         */
        url?: string;
    }>;
    /**
     * The status of the submission.
     */
    status?: string;
    /**
     * Object with custom metadata.
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * The date and time when the submission was fully completed.
     */
    completed_at?: string;
});

export type GetSubmissionError = unknown;

export type ArchiveSubmissionData = {
    path: {
        /**
         * The unique identifier of the submission.
         */
        id: number;
    };
};

export type ArchiveSubmissionResponse = ({
    /**
     * Submission unique ID number.
     */
    id?: number;
    /**
     * Date and time when the submission was archived.
     */
    archived_at?: string;
});

export type ArchiveSubmissionError = unknown;

export type CreateSubmissionsFromEmailsData = {
    body: {
        /**
         * The unique identifier of the template.
         */
        template_id: number;
        /**
         * A comma-separated list of email addresses to send the submission to.
         */
        emails: string;
        /**
         * Set `false` to disable signature request emails sending.
         */
        send_email?: boolean;
        message?: {
            /**
             * Custom signature request email subject.
             */
            subject?: string;
            /**
             * Custom signature request email body. Can include the following variables: {{template.name}}, {{submitter.link}}, {{account.name}}.
             */
            body?: string;
        };
    };
};

export type CreateSubmissionsFromEmailsResponse = (Array<{
    /**
     * Submitter unique ID number.
     */
    id?: number;
    /**
     * Submission UUID.
     */
    submission_id?: number;
    /**
     * Submitter UUID
     */
    uuid?: string;
    /**
     * The email address of the submitter.
     */
    email?: string;
    /**
     * Unique key to be used in the signing form URL.
     */
    slug?: string;
    /**
     * An array of objects with pre-filled values for the submission. Use field names for keys of the object.
     */
    values?: {
        [key: string]: unknown;
    };
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * User agent string of the submitter.
     */
    ua?: string;
    /**
     * IP address of the submitter.
     */
    ip?: string;
    /**
     * The date and time when the signing request was sent to the submitter.
     */
    sent_at?: string;
    /**
     * The date and time when the submitter opened the signing form.
     */
    opened_at?: string;
    /**
     * The date and time when the submitter completed the signing form.
     */
    completed_at?: string;
    /**
     * The date and time when the submitter declined the signing form.
     */
    declined_at?: string;
    /**
     * The date and time when the submitter was created.
     */
    created_at?: string;
    /**
     * The date and time when the submitter was last updated.
     */
    updated_at?: string;
    /**
     * The name of the submitter.
     */
    name?: string;
    /**
     * The phone number of the submitter.
     */
    phone?: string;
    /**
     * Your application-specific unique string key to identify this submitter within your app.
     */
    external_id?: string;
    preferences?: {
        /**
         * Set `false` to disable signature request emails sending.
         */
        send_email?: boolean;
        /**
         * Set `true` to send signature request via phone number and SMS.
         */
        send_sms?: boolean;
    };
}>);

export type CreateSubmissionsFromEmailsError = unknown;

export type GetSubmitterData = {
    path: {
        /**
         * The unique identifier of the submitter.
         */
        id: number;
    };
};

export type GetSubmitterResponse = ({
    /**
     * Submitter unique ID number.
     */
    id?: number;
    /**
     * Submission unique ID number.
     */
    submission_id?: number;
    /**
     * Submitter UUID.
     */
    uuid?: string;
    /**
     * The email address of the submitter.
     */
    email?: string;
    /**
     * Unique key to be used in the form signing link and embedded form.
     */
    slug?: string;
    /**
     * The date and time when the signing request was sent to the submitter.
     */
    sent_at?: string;
    /**
     * The date and time when the submitter opened the signing form.
     */
    opened_at?: string;
    /**
     * The date and time when the submitter completed the signing form.
     */
    completed_at?: string;
    /**
     * The date and time when the submitter declined the signing form.
     */
    declined_at?: string;
    /**
     * The date and time when the submitter was created.
     */
    created_at?: string;
    /**
     * The date and time when the submitter was last updated.
     */
    updated_at?: string;
    /**
     * Submitter name.
     */
    name?: string;
    /**
     * Submitter phone number.
     */
    phone?: string;
    submission_events?: Array<{
        /**
         * Submission event unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the submitter that triggered the event.
         */
        submitter_id?: number;
        /**
         * Event type.
         */
        event_type?: string;
        /**
         * Date and time when the event was triggered.
         */
        event_timestamp?: string;
    }>;
    /**
     * An array of pre-filled values for the submission.
     */
    values?: Array<{
        /**
         * Document template field name
         */
        field?: string;
        /**
         * Pre-filled value of the field.
         */
        value?: string;
    }>;
    /**
     * An array of documents that the submitter has to sign.
     */
    documents?: Array<{
        /**
         * Document name.
         */
        name?: string;
        /**
         * Document URL.
         */
        url?: string;
    }>;
    /**
     * The role of the submitter in the signing process.
     */
    role?: string;
});

export type GetSubmitterError = unknown;

export type UpdateSubmitterData = {
    body: {
        /**
         * The name of the submitter.
         */
        name?: string;
        /**
         * The email address of the submitter.
         */
        email?: string;
        /**
         * The phone number of the submitter, formatted according to the E.164 standard.
         */
        phone?: string;
        /**
         * An object with pre-filled values for the submission. Use field names for keys of the object. For more configurations see `fields` param.
         */
        values?: {
            [key: string]: unknown;
        };
        /**
         * Your application-specific unique string key to identify this submitter within your app.
         */
        external_id?: string;
        /**
         * Set `true` to re-send signature request emails.
         */
        send_email?: boolean;
        /**
         * Set `true` to re-send signature request via phone number SMS.
         */
        send_sms?: boolean;
        /**
         * Specify Reply-To address to use in the notification emails.
         */
        reply_to?: string;
        /**
         * Submitter specific URL to redirect to after the submission completion.
         */
        completed_redirect_url?: string;
        /**
         * Pass `true` to mark submitter as completed and auto-signed via API.
         */
        completed?: boolean;
        message?: {
            /**
             * Custom signature request email subject.
             */
            subject?: string;
            /**
             * Custom signature request email body. Can include the following variables: {{template.name}}, {{submitter.link}}, {{account.name}}.
             */
            body?: string;
        };
        /**
         * A list of configurations for template document form fields.
         */
        fields?: Array<{
            /**
             * Document template field name
             */
            name: string;
            /**
             * Default value of the field. Use base64 encoded file or a public URL to the image file to set default signature or image fields.
             */
            default_value?: string;
            /**
             * HTML field validation pattern string based on https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern specification.
             */
            validation_pattern?: string;
            /**
             * A custom message to display on pattern validation failure.
             */
            invalid_message?: string;
            /**
             * Set `true` to make it impossible for the submitter to edit predefined field value.
             */
            readonly?: boolean;
        }>;
    };
    path: {
        /**
         * The unique identifier of the submitter.
         */
        id: number;
    };
};

export type UpdateSubmitterResponse = ({
    /**
     * Submitter unique ID number.
     */
    id?: number;
    /**
     * Submission unique ID number.
     */
    submission_id?: number;
    /**
     * Submitter UUID.
     */
    uuid?: string;
    /**
     * The email address of the submitter.
     */
    email?: string;
    /**
     * Unique key to be used in the form signing link and embedded form.
     */
    slug?: string;
    /**
     * The date and time when the signing request was sent to the submitter.
     */
    sent_at?: string;
    /**
     * The date and time when the submitter opened the signing form.
     */
    opened_at?: string;
    /**
     * The date and time when the submitter completed the signing form.
     */
    completed_at?: string;
    /**
     * The date and time when the submitter declined the signing form.
     */
    declined_at?: string;
    /**
     * The date and time when the submitter was created.
     */
    created_at?: string;
    /**
     * The date and time when the submitter was last updated.
     */
    updated_at?: string;
    /**
     * Submitter name.
     */
    name?: string;
    /**
     * Submitter phone number.
     */
    phone?: string;
    /**
     * An array of pre-filled values for the submission.
     */
    values?: Array<{
        /**
         * Document template field name
         */
        field?: string;
        /**
         * Pre-filled value of the field.
         */
        value?: string;
    }>;
    /**
     * An array of documents that the submitter has to sign.
     */
    documents?: Array<{
        /**
         * Document name.
         */
        name?: string;
        /**
         * Document URL.
         */
        url?: string;
    }>;
    /**
     * The role of the submitter in the signing process.
     */
    role?: string;
});

export type UpdateSubmitterError = unknown;

export type GetSubmittersData = {
    query?: {
        /**
         * The unique identifier of the submitter to start the list from. It allows you to receive only submitters with id greater than the specified value. Pass ID value from the `pagination.next` response to load the next batch of submitters.
         */
        after?: number;
        /**
         * The unique identifier of the submitter to end the list with. It allows you to receive only submitters with id less than the specified value.
         */
        before?: number;
        /**
         * The date and time string value to filter submitters that completed the submission after the specified date and time.
         */
        completed_after?: string;
        /**
         * The date and time string value to filter submitters that completed the submission before the specified date and time.
         */
        completed_before?: string;
        /**
         * The unique applications-specific identifier provided for a submitter when initializing a signature request. It allows you to receive only submitters with a specified external id.
         */
        external_id?: string;
        /**
         * The number of submitters to return. Default value is 10. Maximum value is 100.
         */
        limit?: number;
        /**
         * Filter submitters on name, email or phone partial match.
         */
        q?: string;
        /**
         * The submission ID allows you to receive only the submitters related to that specific submission.
         */
        submission_id?: number;
    };
};

export type GetSubmittersResponse = ({
    data?: Array<{
        /**
         * Submitter unique ID number.
         */
        id?: number;
        /**
         * Submission unique ID number.
         */
        submission_id?: number;
        /**
         * Submitter UUID.
         */
        uuid?: string;
        /**
         * The email address of the submitter.
         */
        email?: string;
        /**
         * Unique slug of the submitter form.
         */
        slug?: string;
        /**
         * The date and time when the signing request was sent to the submitter.
         */
        sent_at?: string;
        /**
         * The date and time when the submitter opened the signing form.
         */
        opened_at?: string;
        /**
         * The date and time when the submitter completed the signing form.
         */
        completed_at?: string;
        /**
         * The date and time when the submitter declined the signing form.
         */
        declined_at?: string;
        /**
         * The date and time when the submitter was created.
         */
        created_at?: string;
        /**
         * The date and time when the submitter was last updated.
         */
        updated_at?: string;
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Submitter phone number.
         */
        phone?: string;
        /**
         * Submitter's submission status.
         */
        status?: string;
        /**
         * The unique applications-specific identifier
         */
        external_id?: string;
        /**
         * Submitter preferences.
         */
        preferences?: {
            [key: string]: unknown;
        };
        /**
         * Submitter additional metadata.
         */
        metadata?: {
            [key: string]: unknown;
        };
        submission_events?: Array<{
            /**
             * Unique identifier of the submission event.
             */
            id?: number;
            /**
             * Unique identifier of the submitter that triggered the event.
             */
            submitter_id?: number;
            /**
             * Event type.
             */
            event_type?: string;
            /**
             * Date and time when the event was triggered.
             */
            event_timestamp?: string;
        }>;
        /**
         * An array of pre-filled values for the submission.
         */
        values?: Array<{
            /**
             * Document template field name
             */
            field?: string;
            /**
             * Pre-filled value of the field.
             */
            value?: string;
        }>;
        /**
         * An array of documents that the submitter has to sign.
         */
        documents?: Array<{
            /**
             * Document name.
             */
            name?: string;
            /**
             * Document URL.
             */
            url?: string;
        }>;
        /**
         * The role of the submitter in the signing process.
         */
        role?: string;
    }>;
    pagination?: {
        /**
         * Submitters count.
         */
        count?: number;
        /**
         * The ID of the submitter after which the next page starts.
         */
        next?: number;
        /**
         * The ID of the submitter before which the previous page ends.
         */
        prev?: number;
    };
});

export type GetSubmittersError = unknown;

export type AddDocumentToTemplateData = {
    body: {
        /**
         * The list of documents to add or replace in the template.
         */
        documents?: Array<{
            /**
             * Document name. Random uuid will be assigned when not specified.
             */
            name?: string;
            /**
             * Base64-encoded content of the PDF or DOCX file or downloadable file URL. Leave it empty if you create a new document using HTML param.
             */
            file?: string;
            /**
             * HTML template with field tags. Leave it empty if you add a document via PDF or DOCX base64 encoded file param or URL.
             */
            html?: string;
            /**
             * Position of the document. By default will be added as the last document in the template.
             */
            position?: number;
            /**
             * Set to `true` to replace existing document with a new file at `position`. Existing document fields will be transferred to the new document if it doesn't contain any fields
             */
            replace?: boolean;
            /**
             * Set to `true` to remove existing document at given `position` or with given `name`.
             */
            remove?: boolean;
        }>;
        /**
         * Set to `true` to merge all existing and new documents into a single PDF document in the template.
         */
        merge?: boolean;
    };
    path: {
        /**
         * The unique identifier of the documents template.
         */
        id: number;
    };
};

export type AddDocumentToTemplateResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Author unique ID number.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Document unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type AddDocumentToTemplateError = unknown;

export type CloneTemplateData = {
    body: {
        /**
         * Template name. Existing name with (Clone) suffix will be used if not specified.
         */
        name?: string;
        /**
         * The folder's name to which the template should be cloned.
         */
        folder_name?: string;
        /**
         * Your application-specific unique string key to identify this template within your app.
         */
        external_id?: string;
    };
    path: {
        /**
         * The unique identifier of the documents template.
         */
        id: number;
    };
};

export type CloneTemplateResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Identifier of the template in the external system.
     */
    external_id?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Author unique ID number.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Document unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type CloneTemplateError = unknown;

export type CreateTemplateFromHtmlData = {
    body: {
        /**
         * HTML template with field tags.
         */
        html: string;
        /**
         * HTML template of the header to be displayed on every page.
         */
        html_header?: string;
        /**
         * HTML template of the footer to be displayed on every page.
         */
        html_footer?: string;
        /**
         * Template name. Random uuid will be assigned when not specified.
         */
        name?: string;
        /**
         * Page size. Letter 8.5 x 11 will be assigned when not specified.
         */
        size?: 'Letter' | 'Legal' | 'Tabloid' | 'Ledger' | 'A0' | 'A1' | 'A2' | 'A3' | 'A4' | 'A5' | 'A6';
        /**
         * Your application-specific unique string key to identify this template within your app. Existing template with specified `external_id` will be updated with a new HTML.
         */
        external_id?: string;
        /**
         * The folder's name to which the template should be created.
         */
        folder_name?: string;
        /**
         * The list of documents built from HTML. Can be used to create a template with multiple documents. Leave `documents` param empty when using a top-level `html` param for a template with a single document.
         */
        documents?: Array<{
            /**
             * HTML template with field tags.
             */
            html: string;
            /**
             * Template name. Random uuid will be assigned when not specified.
             */
            name?: string;
        }>;
    };
};

export type CreateTemplateFromHtmlResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Identifier of the template in the external system.
     */
    external_id?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Author unique ID number.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Document unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type CreateTemplateFromHtmlError = unknown;

export type CreateTemplateFromDocxData = {
    body: {
        /**
         * Name of the template
         */
        name?: string;
        /**
         * Your application-specific unique string key to identify this template within your app. Existing template with specified `external_id` will be updated with a new document.
         */
        external_id?: string;
        /**
         * The folder's name to which the template should be created.
         */
        folder_name?: string;
        documents: Array<{
            /**
             * Name of the document
             */
            name: string;
            /**
             * Base64-encoded content of the DOCX file or downloadable file URL
             */
            file: string;
            /**
             * Fields are optional if you use {{...}} text tags to define fields in the document.
             */
            fields?: Array<{
                /**
                 * Name of the field
                 */
                name?: string;
                /**
                 * Role name of the signer
                 */
                role?: string;
                /**
                 * Type of the field (e.g., text, signature, date, initials)
                 */
                type?: 'text' | 'signature' | 'initials' | 'date' | 'image' | 'file' | 'payment' | 'stamp' | 'select' | 'checkbox' | 'multiple' | 'radio' | 'cells' | 'phone';
                areas?: Array<{
                    /**
                     * X-coordinate of the field area
                     */
                    x?: number;
                    /**
                     * Y-coordinate of the field area
                     */
                    y?: number;
                    /**
                     * Width of the field area
                     */
                    w?: number;
                    /**
                     * Height of the field area
                     */
                    h?: number;
                    /**
                     * Page number of the field area. Starts from 1.
                     */
                    page?: number;
                }>;
            }>;
        }>;
    };
};

export type CreateTemplateFromDocxResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Identifier of the template in the external system.
     */
    external_id?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Author unique ID number.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Document unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type CreateTemplateFromDocxError = unknown;

export type CreateTemplateFromPdfData = {
    body: {
        /**
         * Name of the template
         */
        name?: string;
        /**
         * The folder's name to which the template should be created.
         */
        folder_name?: string;
        /**
         * Your application-specific unique string key to identify this template within your app. Existing template with specified `external_id` will be updated with a new PDF.
         */
        external_id?: string;
        documents: Array<{
            /**
             * Name of the document
             */
            name: string;
            /**
             * Base64-encoded content of the PDF file or downloadable file URL
             */
            file: string;
            /**
             * Fields are optional if you use {{...}} text tags to define fields in the document.
             */
            fields?: Array<{
                /**
                 * Name of the field
                 */
                name?: string;
                /**
                 * Role name of the signer
                 */
                role?: string;
                /**
                 * Type of the field (e.g., text, signature, date, initials)
                 */
                type?: 'text' | 'signature' | 'initials' | 'date' | 'image' | 'file' | 'payment' | 'stamp' | 'select' | 'checkbox' | 'multiple' | 'radio' | 'cells' | 'phone';
                areas?: Array<{
                    /**
                     * X-coordinate of the field area
                     */
                    x: number;
                    /**
                     * Y-coordinate of the field area
                     */
                    y: number;
                    /**
                     * Width of the field area
                     */
                    w: number;
                    /**
                     * Height of the field area
                     */
                    h: number;
                    /**
                     * Page number of the field area. Starts from 1.
                     */
                    page: number;
                }>;
            }>;
        }>;
    };
};

export type CreateTemplateFromPdfResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Identifier of the template in the external system.
     */
    external_id?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Author unique ID number.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Document unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type CreateTemplateFromPdfError = unknown;

export type MergeTemplateData = {
    body: {
        /**
         * An array of template ids to merge into a new template.
         */
        template_ids: Array<(number)>;
        /**
         * Template name. Existing name with (Merged) suffix will be used if not specified.
         */
        name?: string;
        /**
         * The name of the folder in which the merged template should be placed.
         */
        folder_name?: string;
        /**
         * Your application-specific unique string key to identify this template within your app.
         */
        external_id?: string;
    };
};

export type MergeTemplateResponse = ({
    /**
     * Template unique ID number.
     */
    id?: number;
    /**
     * Unique slug of the document template.
     */
    slug?: string;
    /**
     * List of documents attached to the template.
     */
    schema?: Array<{
        /**
         * Unique indentifier of attached document to the template.
         */
        attachment_uuid?: string;
        /**
         * Name of the attached document to the template.
         */
        name?: string;
    }>;
    /**
     * List of fields to be filled in the template.
     */
    fields?: Array<{
        /**
         * Unique identifier of the field.
         */
        uuid?: string;
        /**
         * Unique identifier of the submitter that filled the field.
         */
        submitter_uuid?: string;
        /**
         * Field name.
         */
        name?: string;
        /**
         * Indicates if the field is required.
         */
        required?: boolean;
        /**
         * List of areas where the field is located in the document.
         */
        areas?: Array<{
            /**
             * X coordinate of the area where the field is located in the document.
             */
            x?: number;
            /**
             * Y coordinate of the area where the field is located in the document.
             */
            y?: number;
            /**
             * Width of the area where the field is located in the document.
             */
            w?: number;
            /**
             * Height of the area where the field is located in the document.
             */
            h?: number;
            /**
             * Unique identifier of the attached document where the field is located.
             */
            attachment_uuid?: string;
            /**
             * Page number of the attached document where the field is located.
             */
            page?: number;
        }>;
    }>;
    submitters?: Array<{
        /**
         * Submitter name.
         */
        name?: string;
        /**
         * Unique identifier of the submitter.
         */
        uuid?: string;
    }>;
    /**
     * Unique identifier of the author of the template.
     */
    author_id?: number;
    /**
     * Date and time when the template was archived.
     */
    archived_at?: string;
    /**
     * Date and time when the template was created.
     */
    created_at?: string;
    /**
     * Date and time when the template was updated.
     */
    updated_at?: string;
    /**
     * Source of the template.
     */
    source?: string;
    /**
     * Identifier of the template in the external system.
     */
    external_id?: string;
    /**
     * Unique identifier of the folder where the template is placed.
     */
    folder_id?: number;
    /**
     * Folder name where the template is placed.
     */
    folder_name?: string;
    author?: {
        /**
         * Author unique ID number.
         */
        id?: number;
        /**
         * First name of the author.
         */
        first_name?: string;
        /**
         * Last name of the author.
         */
        last_name?: string;
        /**
         * Author email.
         */
        email?: string;
    };
    /**
     * List of documents attached to the template.
     */
    documents?: Array<{
        /**
         * Document unique ID number.
         */
        id?: number;
        /**
         * Unique identifier of the document.
         */
        uuid?: string;
        /**
         * URL of the document.
         */
        url?: string;
        /**
         * Document preview image URL.
         */
        preview_image_url?: string;
        /**
         * Document filename.
         */
        filename?: string;
    }>;
});

export type MergeTemplateError = unknown;