/**
 * DocuSeal API
 * DocuSeal API specs
 *
 * OpenAPI spec version: 1.0.0
 * Contact: admin@docuseal.co
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import { beforeEach, describe, expect, test } from "bun:test";
import * as api from "./api"
import { Configuration } from "./configuration";

const config: Configuration = {}

describe("SubmissionsApi", () => {
  let instance: api.SubmissionsApi
  beforeEach(function () {
    instance = new api.SubmissionsApi(config)
  });

  test("archiveSubmission", () => {
    const id: number = 56
    return expect(instance.archiveSubmission(id, {})).resolves.toBe(null)
  })
  test("createSubmission", () => {
    const body: api.SubmissionsBody = {
      templateId: 0,
      submitters: []
    }
    return expect(instance.createSubmission(body, {})).resolves.toBe(null)
  })
  test("createSubmissionsFromEmails", () => {
    const body: api.SubmissionsEmailsBody = {
      templateId: 0,
      emails: ""
    }
    return expect(instance.createSubmissionsFromEmails(body, {})).resolves.toBe(null)
  })
  test("getSubmission", () => {
    const id: number = 56
    return expect(instance.getSubmission(id, {})).resolves.toBe(null)
  })
  test("getSubmissions", () => {
    const templateId: number = 56
    const q: string = "q_example"
    const templateFolder: string = "templateFolder_example"
    const limit: number = 56
    const after: number = 56
    const before: number = 56
    return expect(instance.getSubmissions(templateId, q, templateFolder, limit, after, before, {})).resolves.toBe(null)
  })
})

describe("SubmittersApi", () => {
  let instance: api.SubmittersApi
  beforeEach(function () {
    instance = new api.SubmittersApi(config)
  });

  test("getSubmitter", () => {
    const id: number = 56
    return expect(instance.getSubmitter(id, {})).resolves.toBe(null)
  })
  test("getSubmitters", () => {
    const submissionId: number = 56
    const q: string = "q_example"
    const completedAfter: Date = new Date("2013-10-20T19:20:30+01:00")
    const completedBefore: Date = new Date("2013-10-20T19:20:30+01:00")
    const externalId: string = "externalId_example"
    const limit: number = 56
    const after: number = 56
    const before: number = 56
    return expect(instance.getSubmitters({ submissionId, q, completedAfter, completedBefore, externalId, limit, after, before })).resolves.toBe(null)
  })
  test("updateSubmitter", () => {
    const body: api.SubmittersIdBody = {

    }
    const id: number = 56
    return expect(instance.updateSubmitter(body, id, {})).resolves.toBe(null)
  })
})

describe("TemplatesApi", () => {
  let instance: api.TemplatesApi
  beforeEach(function () {
    instance = new api.TemplatesApi(config)
  });

  test("addDocumentToTemplate", () => {
    const body: api.IdDocumentsBody = {

    }
    const id: number = 56
    return expect(instance.addDocumentToTemplate(body, id, {})).resolves.toBe(null)
  })
  test("archiveTemplate", () => {
    const id: number = 56
    return expect(instance.archiveTemplate(id, {})).resolves.toBe(null)
  })
  test("cloneTemplate", () => {
    const body: api.IdCloneBody = {

    }
    const id: number = 56
    return expect(instance.cloneTemplate(body, id, {})).resolves.toBe(null)
  })
  test("createTemplateFromDocx", () => {
    const body: api.TemplatesDocxBody = {
      documents: []
    }
    return expect(instance.createTemplateFromDocx(body, {})).resolves.toBe(null)
  })
  test("createTemplateFromHtml", () => {
    const body: api.TemplatesHtmlBody = {
      html: ""
    }
    return expect(instance.createTemplateFromHtml(body, {})).resolves.toBe(null)
  })
  test("createTemplateFromPdf", () => {
    const body: api.TemplatesPdfBody = {
      documents: []
    }
    return expect(instance.createTemplateFromPdf(body, {})).resolves.toBe(null)
  })
  test("getTemplate", () => {
    const id: number = 56
    return expect(instance.getTemplate(id, {})).resolves.toBe(null)
  })
  test("getTemplates", () => {
    const q: string = "q_example"
    const externalId: string = "externalId_example"
    const folder: string = "folder_example"
    const archived: boolean = true
    const limit: number = 56
    const after: number = 56
    const before: number = 56
    return expect(instance.getTemplates(q, externalId, folder, archived, limit, after, before, {})).resolves.toBe(null)
  })
  test("mergeTemplate", () => {
    const body: api.TemplatesMergeBody = {
      templateIds: []
    }
    return expect(instance.mergeTemplate(body, {})).resolves.toBe(null)
  })
  test("updateTemplate", () => {
    const body: api.TemplatesIdBody = {}
    const id: number = 56
    return expect(instance.updateTemplate(body, id, {})).resolves.toBe(null)
  })
})

